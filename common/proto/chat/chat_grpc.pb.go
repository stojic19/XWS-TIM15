// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: chat/chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatServiceGrpcClient is the client API for ChatServiceGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceGrpcClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*ChatsMsg, error)
	GetForUser(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*ChatsMsg, error)
	Add(ctx context.Context, in *NewMessage, opts ...grpc.CallOption) (*ChatMsg, error)
}

type chatServiceGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceGrpcClient(cc grpc.ClientConnInterface) ChatServiceGrpcClient {
	return &chatServiceGrpcClient{cc}
}

func (c *chatServiceGrpcClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*ChatsMsg, error) {
	out := new(ChatsMsg)
	err := c.cc.Invoke(ctx, "/chat.ChatServiceGrpc/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceGrpcClient) GetForUser(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*ChatsMsg, error) {
	out := new(ChatsMsg)
	err := c.cc.Invoke(ctx, "/chat.ChatServiceGrpc/GetForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceGrpcClient) Add(ctx context.Context, in *NewMessage, opts ...grpc.CallOption) (*ChatMsg, error) {
	out := new(ChatMsg)
	err := c.cc.Invoke(ctx, "/chat.ChatServiceGrpc/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceGrpcServer is the server API for ChatServiceGrpc service.
// All implementations must embed UnimplementedChatServiceGrpcServer
// for forward compatibility
type ChatServiceGrpcServer interface {
	Get(context.Context, *GetRequest) (*ChatsMsg, error)
	GetForUser(context.Context, *IdMessage) (*ChatsMsg, error)
	Add(context.Context, *NewMessage) (*ChatMsg, error)
	mustEmbedUnimplementedChatServiceGrpcServer()
}

// UnimplementedChatServiceGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceGrpcServer struct {
}

func (UnimplementedChatServiceGrpcServer) Get(context.Context, *GetRequest) (*ChatsMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedChatServiceGrpcServer) GetForUser(context.Context, *IdMessage) (*ChatsMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForUser not implemented")
}
func (UnimplementedChatServiceGrpcServer) Add(context.Context, *NewMessage) (*ChatMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedChatServiceGrpcServer) mustEmbedUnimplementedChatServiceGrpcServer() {}

// UnsafeChatServiceGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceGrpcServer will
// result in compilation errors.
type UnsafeChatServiceGrpcServer interface {
	mustEmbedUnimplementedChatServiceGrpcServer()
}

func RegisterChatServiceGrpcServer(s grpc.ServiceRegistrar, srv ChatServiceGrpcServer) {
	s.RegisterService(&ChatServiceGrpc_ServiceDesc, srv)
}

func _ChatServiceGrpc_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceGrpcServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatServiceGrpc/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceGrpcServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServiceGrpc_GetForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceGrpcServer).GetForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatServiceGrpc/GetForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceGrpcServer).GetForUser(ctx, req.(*IdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServiceGrpc_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceGrpcServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatServiceGrpc/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceGrpcServer).Add(ctx, req.(*NewMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatServiceGrpc_ServiceDesc is the grpc.ServiceDesc for ChatServiceGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatServiceGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatServiceGrpc",
	HandlerType: (*ChatServiceGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ChatServiceGrpc_Get_Handler,
		},
		{
			MethodName: "GetForUser",
			Handler:    _ChatServiceGrpc_GetForUser_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _ChatServiceGrpc_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat/chat.proto",
}
