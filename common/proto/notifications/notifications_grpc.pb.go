// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: notifications/notifications.proto

package notifications

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificationsServiceClient is the client API for NotificationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationsServiceClient interface {
	SaveNotification(ctx context.Context, in *SaveNotificationRequest, opts ...grpc.CallOption) (*StringResponse, error)
	GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (*GetNotificationsResponse, error)
	GetOneNotification(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetOneNotificationResponse, error)
	GetAllNotificationsByFollowerId(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetNotificationsResponse, error)
	GetAllNotificationsByUserId(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetNotificationsResponse, error)
	DeleteNotification(ctx context.Context, in *DeleteByIdRequest, opts ...grpc.CallOption) (*StringResponse, error)
	SaveNotificationSettings(ctx context.Context, in *SaveNotificationSettingsRequest, opts ...grpc.CallOption) (*StringResponse, error)
	GetSettingsByUserId(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetSettingsByUserIdResponse, error)
	DeleteNotificationSettings(ctx context.Context, in *DeleteByIdRequest, opts ...grpc.CallOption) (*StringResponse, error)
	UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*StringResponse, error)
	UpdateMessagesSettings(ctx context.Context, in *UpdateMessagesSettingsRequest, opts ...grpc.CallOption) (*StringResponse, error)
	UpdatePostsSettings(ctx context.Context, in *UpdatePostsSettingsRequest, opts ...grpc.CallOption) (*StringResponse, error)
}

type notificationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationsServiceClient(cc grpc.ClientConnInterface) NotificationsServiceClient {
	return &notificationsServiceClient{cc}
}

func (c *notificationsServiceClient) SaveNotification(ctx context.Context, in *SaveNotificationRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, "/notifications.NotificationsService/SaveNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceClient) GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (*GetNotificationsResponse, error) {
	out := new(GetNotificationsResponse)
	err := c.cc.Invoke(ctx, "/notifications.NotificationsService/GetNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceClient) GetOneNotification(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetOneNotificationResponse, error) {
	out := new(GetOneNotificationResponse)
	err := c.cc.Invoke(ctx, "/notifications.NotificationsService/GetOneNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceClient) GetAllNotificationsByFollowerId(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetNotificationsResponse, error) {
	out := new(GetNotificationsResponse)
	err := c.cc.Invoke(ctx, "/notifications.NotificationsService/GetAllNotificationsByFollowerId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceClient) GetAllNotificationsByUserId(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetNotificationsResponse, error) {
	out := new(GetNotificationsResponse)
	err := c.cc.Invoke(ctx, "/notifications.NotificationsService/GetAllNotificationsByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceClient) DeleteNotification(ctx context.Context, in *DeleteByIdRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, "/notifications.NotificationsService/DeleteNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceClient) SaveNotificationSettings(ctx context.Context, in *SaveNotificationSettingsRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, "/notifications.NotificationsService/SaveNotificationSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceClient) GetSettingsByUserId(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetSettingsByUserIdResponse, error) {
	out := new(GetSettingsByUserIdResponse)
	err := c.cc.Invoke(ctx, "/notifications.NotificationsService/GetSettingsByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceClient) DeleteNotificationSettings(ctx context.Context, in *DeleteByIdRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, "/notifications.NotificationsService/DeleteNotificationSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceClient) UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, "/notifications.NotificationsService/UpdateSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceClient) UpdateMessagesSettings(ctx context.Context, in *UpdateMessagesSettingsRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, "/notifications.NotificationsService/UpdateMessagesSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceClient) UpdatePostsSettings(ctx context.Context, in *UpdatePostsSettingsRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, "/notifications.NotificationsService/UpdatePostsSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationsServiceServer is the server API for NotificationsService service.
// All implementations must embed UnimplementedNotificationsServiceServer
// for forward compatibility
type NotificationsServiceServer interface {
	SaveNotification(context.Context, *SaveNotificationRequest) (*StringResponse, error)
	GetNotifications(context.Context, *GetNotificationsRequest) (*GetNotificationsResponse, error)
	GetOneNotification(context.Context, *GetByIdRequest) (*GetOneNotificationResponse, error)
	GetAllNotificationsByFollowerId(context.Context, *GetByIdRequest) (*GetNotificationsResponse, error)
	GetAllNotificationsByUserId(context.Context, *GetByIdRequest) (*GetNotificationsResponse, error)
	DeleteNotification(context.Context, *DeleteByIdRequest) (*StringResponse, error)
	SaveNotificationSettings(context.Context, *SaveNotificationSettingsRequest) (*StringResponse, error)
	GetSettingsByUserId(context.Context, *GetByIdRequest) (*GetSettingsByUserIdResponse, error)
	DeleteNotificationSettings(context.Context, *DeleteByIdRequest) (*StringResponse, error)
	UpdateSettings(context.Context, *UpdateSettingsRequest) (*StringResponse, error)
	UpdateMessagesSettings(context.Context, *UpdateMessagesSettingsRequest) (*StringResponse, error)
	UpdatePostsSettings(context.Context, *UpdatePostsSettingsRequest) (*StringResponse, error)
	mustEmbedUnimplementedNotificationsServiceServer()
}

// UnimplementedNotificationsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationsServiceServer struct {
}

func (UnimplementedNotificationsServiceServer) SaveNotification(context.Context, *SaveNotificationRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveNotification not implemented")
}
func (UnimplementedNotificationsServiceServer) GetNotifications(context.Context, *GetNotificationsRequest) (*GetNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifications not implemented")
}
func (UnimplementedNotificationsServiceServer) GetOneNotification(context.Context, *GetByIdRequest) (*GetOneNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneNotification not implemented")
}
func (UnimplementedNotificationsServiceServer) GetAllNotificationsByFollowerId(context.Context, *GetByIdRequest) (*GetNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNotificationsByFollowerId not implemented")
}
func (UnimplementedNotificationsServiceServer) GetAllNotificationsByUserId(context.Context, *GetByIdRequest) (*GetNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNotificationsByUserId not implemented")
}
func (UnimplementedNotificationsServiceServer) DeleteNotification(context.Context, *DeleteByIdRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotification not implemented")
}
func (UnimplementedNotificationsServiceServer) SaveNotificationSettings(context.Context, *SaveNotificationSettingsRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveNotificationSettings not implemented")
}
func (UnimplementedNotificationsServiceServer) GetSettingsByUserId(context.Context, *GetByIdRequest) (*GetSettingsByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettingsByUserId not implemented")
}
func (UnimplementedNotificationsServiceServer) DeleteNotificationSettings(context.Context, *DeleteByIdRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotificationSettings not implemented")
}
func (UnimplementedNotificationsServiceServer) UpdateSettings(context.Context, *UpdateSettingsRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSettings not implemented")
}
func (UnimplementedNotificationsServiceServer) UpdateMessagesSettings(context.Context, *UpdateMessagesSettingsRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessagesSettings not implemented")
}
func (UnimplementedNotificationsServiceServer) UpdatePostsSettings(context.Context, *UpdatePostsSettingsRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePostsSettings not implemented")
}
func (UnimplementedNotificationsServiceServer) mustEmbedUnimplementedNotificationsServiceServer() {}

// UnsafeNotificationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationsServiceServer will
// result in compilation errors.
type UnsafeNotificationsServiceServer interface {
	mustEmbedUnimplementedNotificationsServiceServer()
}

func RegisterNotificationsServiceServer(s grpc.ServiceRegistrar, srv NotificationsServiceServer) {
	s.RegisterService(&NotificationsService_ServiceDesc, srv)
}

func _NotificationsService_SaveNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).SaveNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifications.NotificationsService/SaveNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).SaveNotification(ctx, req.(*SaveNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsService_GetNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).GetNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifications.NotificationsService/GetNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).GetNotifications(ctx, req.(*GetNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsService_GetOneNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).GetOneNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifications.NotificationsService/GetOneNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).GetOneNotification(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsService_GetAllNotificationsByFollowerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).GetAllNotificationsByFollowerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifications.NotificationsService/GetAllNotificationsByFollowerId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).GetAllNotificationsByFollowerId(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsService_GetAllNotificationsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).GetAllNotificationsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifications.NotificationsService/GetAllNotificationsByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).GetAllNotificationsByUserId(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsService_DeleteNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).DeleteNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifications.NotificationsService/DeleteNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).DeleteNotification(ctx, req.(*DeleteByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsService_SaveNotificationSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveNotificationSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).SaveNotificationSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifications.NotificationsService/SaveNotificationSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).SaveNotificationSettings(ctx, req.(*SaveNotificationSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsService_GetSettingsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).GetSettingsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifications.NotificationsService/GetSettingsByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).GetSettingsByUserId(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsService_DeleteNotificationSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).DeleteNotificationSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifications.NotificationsService/DeleteNotificationSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).DeleteNotificationSettings(ctx, req.(*DeleteByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsService_UpdateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).UpdateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifications.NotificationsService/UpdateSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).UpdateSettings(ctx, req.(*UpdateSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsService_UpdateMessagesSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessagesSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).UpdateMessagesSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifications.NotificationsService/UpdateMessagesSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).UpdateMessagesSettings(ctx, req.(*UpdateMessagesSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsService_UpdatePostsSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostsSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).UpdatePostsSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifications.NotificationsService/UpdatePostsSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).UpdatePostsSettings(ctx, req.(*UpdatePostsSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationsService_ServiceDesc is the grpc.ServiceDesc for NotificationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notifications.NotificationsService",
	HandlerType: (*NotificationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveNotification",
			Handler:    _NotificationsService_SaveNotification_Handler,
		},
		{
			MethodName: "GetNotifications",
			Handler:    _NotificationsService_GetNotifications_Handler,
		},
		{
			MethodName: "GetOneNotification",
			Handler:    _NotificationsService_GetOneNotification_Handler,
		},
		{
			MethodName: "GetAllNotificationsByFollowerId",
			Handler:    _NotificationsService_GetAllNotificationsByFollowerId_Handler,
		},
		{
			MethodName: "GetAllNotificationsByUserId",
			Handler:    _NotificationsService_GetAllNotificationsByUserId_Handler,
		},
		{
			MethodName: "DeleteNotification",
			Handler:    _NotificationsService_DeleteNotification_Handler,
		},
		{
			MethodName: "SaveNotificationSettings",
			Handler:    _NotificationsService_SaveNotificationSettings_Handler,
		},
		{
			MethodName: "GetSettingsByUserId",
			Handler:    _NotificationsService_GetSettingsByUserId_Handler,
		},
		{
			MethodName: "DeleteNotificationSettings",
			Handler:    _NotificationsService_DeleteNotificationSettings_Handler,
		},
		{
			MethodName: "UpdateSettings",
			Handler:    _NotificationsService_UpdateSettings_Handler,
		},
		{
			MethodName: "UpdateMessagesSettings",
			Handler:    _NotificationsService_UpdateMessagesSettings_Handler,
		},
		{
			MethodName: "UpdatePostsSettings",
			Handler:    _NotificationsService_UpdatePostsSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notifications/notifications.proto",
}
