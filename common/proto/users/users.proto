syntax = "proto3";

option go_package = "github.com/stojic19/XWS-TIM15/common/proto/users";

package users;

import "google/api/annotations.proto";

service UsersService{
  rpc AddUser(AddUserRequest) returns(AddUserResponse){
    option(google.api.http) = {
      post: "/users"
      body: "*"
    };
  }
  rpc UpdateUser(UpdateUserRequest) returns(UpdateUserResponse){
    option(google.api.http) = {
      put: "/users"
      body: "*"
    };
  }
  rpc GetUsers(GetUsersRequest) returns(GetUsersResponse){
    option(google.api.http) = {
      get: "/users"
    };
  }
  rpc GetUser(GetUserRequest) returns(GetUserResponse){
    option(google.api.http) = {
      get: "/users/{id}"
    };
  }
  rpc GetUserByUsername(GetUserByUsernameRequest) returns(GetUserResponse){
    option(google.api.http) = {
      get: "/users/getUserByUsername/{username}"
    };
  }
  rpc DeleteUserById(GetUserRequest) returns(StringResponse){
    option(google.api.http) = {
      delete: "/users/{id}"
    };
  }
  rpc SearchPublicUsers(SearchRequest) returns(GetUsersResponse){
    option(google.api.http) = {
      get: "/users/searchPublicUsers/{searchTerm}"
    };
  }
  rpc UpdateInterests(UpdateInterestsRequest) returns(StringResponse){
    option(google.api.http) = {
      put: "/interests"
      body: "*"
    };
  }
  rpc UpdateSkills(UpdateSkillsRequest) returns(StringResponse){
    option(google.api.http) = {
      put: "/skills"
      body: "*"
    };
  }
  rpc UpdateWorkExperience(UpdateWorkExperienceRequest) returns(StringResponse){
    option(google.api.http) = {
      put: "/workExperience"
      body: "*"
    };
  }
  rpc UpdateEducation(UpdateEducationRequest) returns(StringResponse){
    option(google.api.http) = {
      put: "/education"
      body: "*"
    };
  }
  rpc GetInterests(GetUserRequest) returns(GetInterestsResponse){
    option(google.api.http) = {
      get: "/interests/{id}"
    };
  }
  rpc GetSkills(GetUserRequest) returns(GetSkillsResponse){
    option(google.api.http) = {
      get: "/skills/{id}"
    };
  }
  rpc GetWorkExperience(GetUserRequest) returns(GetWorkExperienceResponse){
    option(google.api.http) = {
      get: "/workExperience/{id}"
    };
  }
  rpc GetEducation(GetUserRequest) returns(GetEducationResponse){
    option(google.api.http) = {
      get: "/education/{id}"
    };
  }
  rpc Login(LoginRequest) returns(LoginResponse){
    option(google.api.http) = {
      post: "/login"
      body: "*"
    };
  }
  rpc Validate(ValidateRequest) returns (ValidateResponse) {
    option(google.api.http) = {
      post: "/validate"
      body: "*"
    };
  }
  rpc GetUserForEdit(GetUserRequest) returns(GetUserResponse){
    option(google.api.http) = {
      get: "/getUserForEdit/{id}"
    };
  }
}
message AddUserRequest{
  string username = 1;
  string password = 2;
  string name = 3;
  string email = 4;
  string telephoneNo = 5;
  string gender = 6;
  string dateOfBirth = 7;
  string biography = 8;
  bool isPrivate = 9;
}
message AddUserResponse{
  string response = 1;
}

message UpdateUserRequest{
  string username = 1;
  string password = 2;
  string name = 3;
  string email = 4;
  string telephoneNo = 5;
  string gender = 6;
  string dateOfBirth = 7;
  string biography = 8;
  string newUsername = 9;
  bool isPrivate = 10;
}
message UpdateUserResponse{
  string response = 1;
  string error = 2;
}

message GetUsersRequest{}
message GetUsersResponse{
  repeated User users = 1;
}

message GetUserRequest{
  string id = 1;
}
message GetUserResponse{
  User user = 1;
}

message User{
  string id = 1;
  string username = 2;
  string password = 3;
  string name = 4;
  string email = 5;
  string telephoneNo = 6;
  string gender = 7;
  string dateOfBirth = 8;
  string biography = 9;
  bool isPrivate = 10;
}

message GetUserByUsernameRequest{
  string username = 1;
}
message StringResponse{
  string response = 1;
}

message SearchRequest{
  string searchTerm = 1;
}
message WorkExperience{
  string companyName = 1;
  string jobTitle = 2;
  string startDate = 3;
  string endDate = 4;
}
message Education{
  string institutionType = 1;
  string institutionName = 2;
  string title = 3;
  double gpa = 4;
  string startDate = 5;
  string endDate = 6;
}
message UpdateWorkExperienceRequest{
  string userId = 1;
  repeated WorkExperience workExperiences = 2;
}
message UpdateEducationRequest{
  string userId = 1;
  repeated Education education = 2;
}
message UpdateInterestsRequest{
  string userId = 1;
  repeated string interests = 2;
}
message UpdateSkillsRequest{
  string userId = 1;
  repeated string skills = 2;
}
message GetWorkExperienceResponse{
  repeated WorkExperience workExperience = 1;
}
message GetEducationResponse{
  repeated Education education = 1;
}
message GetInterestsResponse{
  repeated string interests = 1;
}
message GetSkillsResponse{
  repeated string skills = 1;
}
// Login
message LoginRequest {
  string username = 1;
  string password = 2;
}
message LoginResponse {
  int64 status = 1;
  string error = 2;
  string token = 3;
  string id = 4;
}
// Validate
message ValidateRequest {
  string token = 1;
  string username = 2;
}
message ValidateResponse {
  int64 status = 1;
  string error = 2;
}
// ZA GENERISANJE PROTOC FAJLOVA NAKON IZMENE
// protoc -I ./proto --go_out=./proto --go_opt=paths=source_relative --go-grpc_out=./proto --go-grpc_opt=paths=source_relative --grpc-gateway_out=./proto --grpc-gateway_opt=paths=source_relative ./proto/users/users.proto
// OSTALO SU POKUSAJI
//protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative ./proto/users/users.proto
//protoc -I ./proto --go_out=./proto --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative ./proto/users/users.proto
//protoc -I ./proto --go_out=./proto --go_opt=paths=source_relative --go-grpc_out=./proto --go-grpc_opt=paths=source_relative --grpc-gateway_out=./proto --grpc-gateway_opt=paths=source_relative ./proto/users/users.proto

//protoc -I ./proto --go_out ./proto --go_opt paths=source_relative --go-grpc_out ./proto --go-grpc_opt paths=source_relative --grpc-gateway_out ./proto --grpc-gateway_opt paths=source_relative ./proto/users/users.proto


//$ protoc -I ./proto --go_out ./proto --go_opt paths=source_relative --go-grpc_out ./proto --go-grpc_opt paths=source_relative ./proto/users/users.proto
//  protoc -I=./proto --java_out= ./proto/followers/followers.proto --go_opt paths=source_relative --go-grpc_out ./proto --go-grpc_opt paths=source_relative ./proto/users/users.proto

//GIT
//protoc -I . --go_out ./proto --go_opt paths=source_relative --go-grpc_out ./proto --go-grpc_opt paths=source_relative ./proto/users/users.proto
//protoc -I . --grpc-gateway_out ./proto --grpc-gateway_opt logtostderr=true --grpc-gateway_opt paths=source_relative --grpc-gateway_opt generate_unbound_methods=true ./proto/users/users.proto
//protoc -I ./proto --grpc-gateway_out ./proto --grpc-gateway_opt logtostderr=true --grpc-gateway_opt paths=source_relative ./proto/users/users.proto