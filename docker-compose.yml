version: "3.8"

services:
  followers_service:
    image: followers_service
    container_name: followers_service
    build:
      context: .
      dockerfile: ./Followers_microservice/Dockerfile
    restart: on-failure
    env_file:
      - .env
    environment:
      FOLLOWERS_SERVICE_PORT:   ${ENV_FOLLOWERS_SERVICE_PORT}
      NEO4J_DATABASE:           ${ENV_NEO4J_DATABASE}
      FOLLOWERS_DB_HOST:        ${ENV_FOLLOWERS_DB_HOST}
      NEO4J_USER:               ${ENV_NEO4J_USER}
      NEO4J_PASSWORD:           ${ENV_NEO4J_PASSWORD}
      NEO4J_VERSION:            ${ENV_NEO4J_VERSION}
      USERS_SERVICE_HOST:       ${ENV_USERS_SERVICE_HOST}
      USERS_PORT:               ${ENV_USERS_PORT}
      NATS_HOST:                ${ENV_NATS_HOST}
      NATS_PORT:                ${ENV_NATS_PORT}
      NATS_USER:                ${ENV_NATS_USER}
      NATS_PASS:                ${ENV_NATS_PASS}
      BLOCK_COMMAND_SUBJECT:    ${ENV_BLOCK_COMMAND_SUBJECT}
      BLOCK_REPLY_SUBJECT:      ${ENV_BLOCK_REPLY_SUBJECT}
      UNBLOCK_COMMAND_SUBJECT:  ${ENV_UNBLOCK_COMMAND_SUBJECT}
      UNBLOCK_REPLY_SUBJECT:    ${ENV_UNBLOCK_REPLY_SUBJECT}
      
    depends_on:
      - followers_db
      - nats
    networks:
      - network

  followers_db:
    image: neo4j
    container_name: followers_db
    restart: on-failure
    environment:
      NEO4J_AUTH: none
    ports:
      - 7474:7474
      - 7687:7687
    networks:
      - network

  posts_service:
    image: posts_service
    container_name: posts_service
    build:
      context: .
      dockerfile: ./Posts_microservice/Dockerfile
    restart: on-failure
    environment:
      POSTS_SERVICE_PORT: ${ENV_POSTS_SERVICE_PORT}
      POSTS_DB_HOST: ${ENV_POSTS_DB_HOST}
      POSTS_DB_PORT: ${ENV_POSTS_DB_PORT}
      FOLLOWERS_SERVICE_HOST:   ${ENV_FOLLOWERS_SERVICE_HOST}
      FOLLOWERS_SERVICE_PORT:   ${ENV_FOLLOWERS_SERVICE_PORT}
      USERS_SERVICE_HOST:       ${ENV_USERS_SERVICE_HOST}
      USERS_PORT:               ${ENV_USERS_PORT}
    depends_on:
      - posts_db
    networks:
      - network

  posts_db:
    image: mongo
    container_name: posts_db
    restart: on-failure
    ports:
      - 27017:27017
    networks:
      - network
      
  job_offers_service:
    image: job_offers_service
    container_name: job_offers_service
    build:
        context: .
        dockerfile: ./Job_Offers_microservice/Dockerfile
    restart: on-failure
    environment: 
        JOB_OFFERS_SERVICE_PORT:    ${ENV_JOB_OFFERS_SERVICE_PORT}
        JOB_OFFERS_DB_HOST:         ${ENV_JOB_OFFERS_DB_HOST}
        JOB_OFFERS_DB_PORT:         ${ENV_JOB_OFFERS_DB_PORT}
        USERS_SERVICE_HOST:         ${ENV_USERS_SERVICE_HOST}
        USERS_PORT:                 ${ENV_USERS_PORT}
    depends_on:
        - job_offers_db
    networks:
        - network
        
  job_offers_db:
    image: mongo
    container_name: job_offers_db
    restart: on-failure
    networks:
      - network
     

  chat_service:
    image: chat_service
    container_name: chat_service
    build:
        context: .
        dockerfile: ./Chat_microservice/Dockerfile
    restart: on-failure
    environment: 
        CHAT_PORT:                  ${ENV_CHAT_PORT}
        CHAT_DB_HOST:               ${ENV_CHAT_DB_HOST}
        CHAT_DB_PORT:               ${ENV_CHAT_DB_PORT}
        NATS_HOST:                  ${ENV_NATS_HOST}
        NATS_PORT:                  ${ENV_NATS_PORT}
        NATS_USER:                  ${ENV_NATS_USER}
        NATS_PASS:                  ${ENV_NATS_PASS}
        BLOCK_COMMAND_SUBJECT:      ${ENV_BLOCK_COMMAND_SUBJECT}
        BLOCK_REPLY_SUBJECT:        ${ENV_BLOCK_REPLY_SUBJECT}
        UNBLOCK_COMMAND_SUBJECT:    ${ENV_UNBLOCK_COMMAND_SUBJECT}
        UNBLOCK_REPLY_SUBJECT:      ${ENV_UNBLOCK_REPLY_SUBJECT}
    depends_on:
        - chat_db
        - nats
    networks:
        - network
     
  chat_db:
    image: mongo
    container_name: chat_db
    restart: on-failure
    networks:
      - network
     
  users_service:
    image: users_service
    container_name: users_service
    build:
        context: .
        dockerfile: ./JavaMicroservices/User-microservice/Dockerfile
    restart: on-failure
    environment:
        USERS_PORT: ${ENV_USERS_PORT}
        USERS_DB_HOST: ${ENV_USERS_DB_HOST}
        USERS_DB_PORT: ${ENV_USERS_DB_PORT}
    depends_on:
        - users_db
    networks:
      - network
        
        
  users_db:
    image: mongo
    container_name: users_db
    restart: on-failure
    networks:
      - network
     
     
  api_gateway:
    image: api_gateway
    container_name: api_gateway
    build:
      context: .
      dockerfile: ./api_gateway/Dockerfile
    restart: on-failure
    ports:
      - ${GATEWAY_PORT}:${ENV_GATEWAY_PORT}
    environment:
      GATEWAY_PORT: ${ENV_GATEWAY_PORT}
      FOLLOWERS_SERVICE_HOST:   ${ENV_FOLLOWERS_SERVICE_HOST}
      FOLLOWERS_SERVICE_PORT:   ${ENV_FOLLOWERS_SERVICE_PORT}
      POSTS_SERVICE_HOST:       ${ENV_POSTS_SERVICE_HOST}
      POSTS_SERVICE_PORT:       ${ENV_POSTS_SERVICE_PORT}
      USERS_SERVICE_HOST:       ${ENV_USERS_SERVICE_HOST}
      USERS_PORT:               ${ENV_USERS_PORT}
      JOB_OFFERS_SERVICE_HOST:  ${ENV_JOB_OFFERS_SERVICE_HOST}
      JOB_OFFERS_SERVICE_PORT:  ${ENV_JOB_OFFERS_SERVICE_PORT}
      MESSAGES_HOST:            ${ENV_CHAT_HOST}
      MESSAGES_PORT:            ${ENV_CHAT_PORT}
    networks:
      network:
        aliases:
          - api_gateway

  agent_application:
    image: agent_application
    container_name: agent_application
    build:
        context: .
        dockerfile: ./AgentApplication/Dockerfile
    restart: on-failure
    ports:
      - 9000:9000
    environment:
      AGENT_APPLICATION_DB_CONNECTION_STRING: ${ENV_AGENT_APPLICATION_DB_CONNECTION_STRING}
      GATEWAY_PORT: ${ENV_GATEWAY_PORT}
      GATEWAY_HOST: ${ENV_GATEWAY_HOST}
    depends_on:
        - agent_app_db
    networks:
      - network
        
  agent_app_db:
    image: postgres
    container_name: agent_app_db
    restart: on-failure
    environment:
        POSTGRES_PASSWORD: "root"
        POSTGRES_USER: "postgres"
        POSTGRES_DB: "AgentApplication"
    networks:
      - network

  dislinkt_frontend:
    image: dislinkt_frontend
    container_name: dislinkt_frontend
    build:
        context: .
        dockerfile: ./dislinkt-frontend/Dockerfile
        args:
          REACT_APP_BASEURL_DISLINKT: ${REACT_APP_BASE_URL_DISLINKT}
    restart: on-failure
    ports:
      - 3002:3000
    networks:
      - network

  agent_frontend:
    image: agent_frontend
    container_name: agent_frontend
    build:
        context: .
        dockerfile: ./agent-app-frontend/Dockerfile
        args:
          REACT_APP_BASEURL_AGENT: ${REACT_APP_BASE_URL_AGENT}
    restart: on-failure
    ports:
      - 3001:3000
    networks:
      - network

  nats:
    image: nats
    container_name: nats
    restart: on-failure
    networks:
      - network

  loki:
    image: grafana/loki:latest
    networks:
      - network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_RENDERING_SERVER_URL: http://renderer:8081/render
      GF_RENDERING_CALLBACK_URL: http://grafana:3000/
      GF_LOG_FILTERS: rendering:debug
    volumes:
      - grafana:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - network

  renderer:
    image: grafana/grafana-image-renderer:latest
    environment:
      ENABLE_METRICS: "true"
    networks:
      - network

  fluent-bit:
    image: grafana/fluent-bit-plugin-loki:latest
    environment:
      - LOKI_URL=http://loki:3100/loki/api/v1/push
    volumes:
      - ./fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - network

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
    networks:
      - network

  prometheus:
    image: prom/prometheus:latest
    restart: on-failure
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus:/var/lib/prometheus
    networks:
      - network

  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    networks:
      - network

  cadvisor:
    image: google/cadvisor:latest
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - network
  
networks:
  network:
    driver: bridge

volumes:
  grafana:
    name: grafana
  prometheus:
    name: prometheus