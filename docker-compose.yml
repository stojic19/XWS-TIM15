version: "3.8"

services:
  followers_service:
    image: followers_service
    container_name: followers_service
    build:
      context: .
      dockerfile: ./Followers_microservice/Dockerfile
    restart: on-failure
    env_file:
      - .env
    environment:
      FOLLOWERS_SERVICE_PORT:   ${ENV_FOLLOWERS_SERVICE_PORT}
      NEO4J_DATABASE:           ${ENV_NEO4J_DATABASE}
      FOLLOWERS_DB_HOST:        ${ENV_FOLLOWERS_DB_HOST}
      NEO4J_USER:               ${ENV_NEO4J_USER}
      NEO4J_PASSWORD:           ${ENV_NEO4J_PASSWORD}
      NEO4J_VERSION:            ${ENV_NEO4J_VERSION}
      USERS_SERVICE_HOST:       ${ENV_USERS_SERVICE_HOST}
      USERS_PORT:               ${ENV_USERS_PORT}
    depends_on:
      - followers_db
    networks:
      - network

  followers_db:
    image: neo4j
    container_name: followers_db
    restart: on-failure
    environment:
      NEO4J_AUTH: none
    ports:
      - 7474:7474
      - 7687:7687
    networks:
      - network

  posts_service:
    image: posts_service
    container_name: posts_service
    build:
      context: .
      dockerfile: ./Posts_microservice/Dockerfile
    restart: on-failure
    environment:
      POSTS_SERVICE_PORT: ${ENV_POSTS_SERVICE_PORT}
      POSTS_DB_HOST: ${ENV_POSTS_DB_HOST}
      POSTS_DB_PORT: ${ENV_POSTS_DB_PORT}
      FOLLOWERS_SERVICE_HOST:   ${ENV_FOLLOWERS_SERVICE_HOST}
      FOLLOWERS_SERVICE_PORT:   ${ENV_FOLLOWERS_SERVICE_PORT}
      USERS_SERVICE_HOST:       ${ENV_USERS_SERVICE_HOST}
      USERS_PORT:               ${ENV_USERS_PORT}
    depends_on:
      - posts_db
    networks:
      - network

  posts_db:
    image: mongo
    container_name: posts_db
    restart: on-failure
    ports:
      - 27017:27017
    networks:
      - network
      
  job_offers_service:
    image: job_offers_service
    container_name: job_offers_service
    build:
        context: .
        dockerfile: ./Job_Offers_microservice/Dockerfile
    restart: on-failure
    environment: 
        JOB_OFFERS_SERVICE_PORT: ${ENV_JOB_OFFERS_SERVICE_PORT}
        JOB_OFFERS_DB_HOST: ${ENV_JOB_OFFERS_DB_HOST}
        JOB_OFFERS_DB_PORT: ${ENV_JOB_OFFERS_DB_PORT}
    depends_on:
        - job_offers_db
    networks:
        - network
        
  job_offers_db:
    image: mongo
    container_name: job_offers_db
    restart: on-failure
    networks:
      - network
     

  messages_service:
    image: messages_service
    container_name: messages_service
    build:
        context: .
        dockerfile: ./Messages_microservice/Dockerfile
    restart: on-failure
    environment: 
        MESSAGES_PORT: ${ENV_MESSAGES_PORT}
    networks:
        - network
     
  users_service:
    image: users_service
    container_name: users_service
    build:
        context: .
        dockerfile: ./JavaMicroservices/User-microservice/Dockerfile
    restart: on-failure
    environment:
        USERS_PORT: ${ENV_USERS_PORT}
        USERS_DB_HOST: ${ENV_USERS_DB_HOST}
        USERS_DB_PORT: ${ENV_USERS_DB_PORT}
    depends_on:
        - users_db
    networks:
      - network
        
        
  users_db:
    image: mongo
    container_name: users_db
    restart: on-failure
    networks:
      - network
     
     
  api_gateway:
    image: api_gateway
    container_name: api_gateway
    build:
      context: .
      dockerfile: ./api_gateway/Dockerfile
    restart: on-failure
    ports:
      - ${GATEWAY_PORT}:${ENV_GATEWAY_PORT}
    environment:
      GATEWAY_PORT: ${ENV_GATEWAY_PORT}
      FOLLOWERS_SERVICE_HOST:   ${ENV_FOLLOWERS_SERVICE_HOST}
      FOLLOWERS_SERVICE_PORT:   ${ENV_FOLLOWERS_SERVICE_PORT}
      POSTS_SERVICE_HOST:       ${ENV_POSTS_SERVICE_HOST}
      POSTS_SERVICE_PORT:       ${ENV_POSTS_SERVICE_PORT}
      USERS_SERVICE_HOST:       ${ENV_USERS_SERVICE_HOST}
      USERS_PORT:               ${ENV_USERS_PORT}
      JOB_OFFERS_SERVICE_HOST:  ${ENV_JOB_OFFERS_SERVICE_HOST}
      JOB_OFFERS_SERVICE_PORT:  ${ENV_JOB_OFFERS_SERVICE_PORT}
      MESSAGES_HOST:            ${ENV_MESSAGES_HOST}
      MESSAGES_PORT:            ${ENV_MESSAGES_PORT}
    networks:
      - network

networks:
  network:
    driver: bridge