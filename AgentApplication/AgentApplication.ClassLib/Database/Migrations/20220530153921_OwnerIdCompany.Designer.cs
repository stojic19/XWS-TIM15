// <auto-generated />
using System;
using AgentApplication.ClassLib.Database.EfStructures;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AgentApplication.ClassLib.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220530153921_OwnerIdCompany")]
    partial class OwnerIdCompany
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AgentApplication.ClassLib.Model.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Registered")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("TimeOfCreation")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("AgentApplication.ClassLib.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimeOfRegistration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AgentApplication.ClassLib.Model.Company", b =>
                {
                    b.HasOne("AgentApplication.ClassLib.Model.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("AgentApplication.ClassLib.Model.Comment", "Comments", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Content")
                                .HasColumnType("text");

                            b1.Property<DateTime>("TimeOfCreation")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.HasKey("CompanyId", "Id");

                            b1.HasIndex("UserId");

                            b1.ToTable("Comment");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");

                            b1.HasOne("AgentApplication.ClassLib.Model.User", "User")
                                .WithMany()
                                .HasForeignKey("UserId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("User");
                        });

                    b.OwnsOne("AgentApplication.ClassLib.Model.CompanyInfo", "CompanyInfo", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .HasColumnType("text");

                            b1.Property<string>("Culture")
                                .HasColumnType("text");

                            b1.Property<string>("Description")
                                .HasColumnType("text");

                            b1.Property<string>("Email")
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("PhoneNumber")
                                .HasColumnType("text");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.OwnsMany("AgentApplication.ClassLib.Model.Grade", "Grades", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("TimeOfCreation")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnType("integer");

                            b1.HasKey("CompanyId", "Id");

                            b1.HasIndex("UserId");

                            b1.ToTable("Grade");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");

                            b1.HasOne("AgentApplication.ClassLib.Model.User", "User")
                                .WithMany()
                                .HasForeignKey("UserId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("User");
                        });

                    b.OwnsMany("AgentApplication.ClassLib.Model.JobOffer", "JobOffers", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .HasColumnType("text");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("boolean");

                            b1.Property<string>("Position")
                                .HasColumnType("text");

                            b1.Property<string>("Requirements")
                                .HasColumnType("text");

                            b1.Property<DateTime>("TimeOfCreation")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("CompanyId", "Id");

                            b1.ToTable("JobOffer");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.Navigation("Comments");

                    b.Navigation("CompanyInfo");

                    b.Navigation("Grades");

                    b.Navigation("JobOffers");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("AgentApplication.ClassLib.Model.User", b =>
                {
                    b.OwnsOne("AgentApplication.ClassLib.Model.UserPersonalInfo", "PersonalInfo", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("BirthDate")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<string>("Email")
                                .HasColumnType("text");

                            b1.Property<string>("FirstName")
                                .HasColumnType("text");

                            b1.Property<int>("Gender")
                                .HasColumnType("integer");

                            b1.Property<string>("LastName")
                                .HasColumnType("text");

                            b1.Property<string>("MiddleName")
                                .HasColumnType("text");

                            b1.Property<string>("PhoneNumber")
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("PersonalInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
